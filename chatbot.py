import openai


def chatbot_response(query: str, api_key: str, results):
    """
    Generates and returns a response based on the user-inputted query using an OpenAI model which is
    referenced using a user-inputted OpenAI API key

    :param query: user-inputted query
    :param api_key: user-inputted OpenAI API key
    :param results: most similar results from Vector DB
    :return: a response generated by an OpenAI model to the user-inputted query
    """

    if not results:
        # Returns this message if no similar documents could be found
        return ("No relevant context found!")


    # Joins the content of the documents into a single string, separated by double newlines
    context = ""

    for result in results:
        context += result.payload['text'] + "\n\n"

    # Generates a prompt with the query and the context, which provides instructions to the OpenAI model
    prompt = (
        f"Use the following information to answer the query.\n\n{context}\n\n"
        f"Query: {query}\n\n"
        f"Provide a detailed and accurate response based on the information provided."
    )

    try:
        client = openai.OpenAI(api_key=api_key)  # Initializes an OpenAI client using the provided API key

        # Sends a request to OpenAIâ€™s chat completion endpoint
        response = client.chat.completions.create(
            model="gpt-4o",  # Specifies the model to use (Can change this)
            messages=[
                {"role": "system", "content": "You are an assistant for answering questions about University of "
                                              "Maryland classes and schedules, who writes concisely and clearly! "
                                              "Be relevant and to the point."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.5  # Controls the randomness of the output
        )

        # Extracts the content of the first message in the response choices
        return response.choices[0].message.content.strip()
    except:
        return f"An error occurred. Please try again."
